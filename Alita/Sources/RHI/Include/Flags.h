//
// Created by realxie on 2019-10-02.
//

#ifndef ALITA_RHIFLAGS_H
#define ALITA_RHIFLAGS_H

#include "Macros.h"
#include "Shader.h"

#include <vector>
#include <string>

NS_RHI_BEGIN

class ShaderHND;

class BufferHND;

typedef std::uint32_t Flags;
typedef std::uint32_t BufferSize;

typedef Flags PipelineVertexInputStateCreateFlags;
typedef Flags PipelineInputAssemblyStateCreateFlags;
typedef Flags PipelineTessellationStateCreateFlags;
typedef Flags PipelineViewportStateCreateFlags;
typedef Flags PipelineRasterizationStateCreateFlags;
typedef Flags CullModeFlags;
typedef Flags PipelineMultisampleStateCreateFlags;
typedef Flags PipelineDepthStencilStateCreateFlags;
typedef Flags PipelineColorBlendStateCreateFlags;
typedef Flags SampleCountFlags;
typedef Flags ColorComponentFlags;
typedef Flags PipelineDynamicStateCreateFlags;
typedef Flags PipelineLayoutCreateFlags;
typedef Flags ShaderStageFlags;
typedef Flags SamplerCreateFlags;
typedef Flags PipelineCreateFlags;
typedef Flags PipelineShaderStageCreateFlags;
typedef Flags PipelineVertexInputStateCreateFlags;
typedef Flags PipelineInputAssemblyStateCreateFlags;
typedef Flags PipelineTessellationStateCreateFlags;
typedef Flags PipelineViewportStateCreateFlags;
typedef Flags PipelineRasterizationStateCreateFlags;
typedef Flags DescriptorPoolCreateFlags;
typedef Flags DescriptorPoolResetFlags;
typedef Flags FramebufferCreateFlags;
typedef Flags RenderPassCreateFlags;
typedef Flags AttachmentDescriptionFlags;
typedef Flags SubpassDescriptionFlags;
typedef Flags ColorWriteFlags;

#define DEFINE_NON_DISPATCHABLE_HANDLE(object) typedef uint64_t Native##object;
DEFINE_NON_DISPATCHABLE_HANDLE(Semaphore)
DEFINE_NON_DISPATCHABLE_HANDLE(Fence)
DEFINE_NON_DISPATCHABLE_HANDLE(DeviceMemory)
DEFINE_NON_DISPATCHABLE_HANDLE(Buffer)
DEFINE_NON_DISPATCHABLE_HANDLE(Image)
DEFINE_NON_DISPATCHABLE_HANDLE(Event)
DEFINE_NON_DISPATCHABLE_HANDLE(QueryPool)
DEFINE_NON_DISPATCHABLE_HANDLE(BufferView)
DEFINE_NON_DISPATCHABLE_HANDLE(ImageView)
DEFINE_NON_DISPATCHABLE_HANDLE(ShaderModule)
DEFINE_NON_DISPATCHABLE_HANDLE(PipelineCache)
DEFINE_NON_DISPATCHABLE_HANDLE(PipelineLayout)
DEFINE_NON_DISPATCHABLE_HANDLE(RenderPass)
DEFINE_NON_DISPATCHABLE_HANDLE(Pipeline)
DEFINE_NON_DISPATCHABLE_HANDLE(DescriptorSetLayout)
DEFINE_NON_DISPATCHABLE_HANDLE(Sampler)
DEFINE_NON_DISPATCHABLE_HANDLE(DescriptorPool)
DEFINE_NON_DISPATCHABLE_HANDLE(DescriptorSet)
DEFINE_NON_DISPATCHABLE_HANDLE(Framebuffer)
DEFINE_NON_DISPATCHABLE_HANDLE(CommandPool)

typedef uint32_t Flags;
typedef uint32_t Bool32;
typedef uint64_t DeviceSize;
typedef uint32_t SampleMask;

typedef enum class BufferUsageFlagBits
{
    TRANSFER_SRC_BIT = 0x00000001,
    TRANSFER_DST_BIT = 0x00000002,
    UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    UNIFORM_BUFFER_BIT = 0x00000010,
    STORAGE_BUFFER_BIT = 0x00000020,
    INDEX_BUFFER_BIT = 0x00000040,
    VERTEX_BUFFER_BIT = 0x00000080,
    INDIRECT_BUFFER_BIT = 0x00000100,
    CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} BufferUsageFlagBits;


typedef enum class SharingMode
{
    EXCLUSIVE = 0,
    CONCURRENT = 1,
    BEGIN_RANGE = EXCLUSIVE,
    END_RANGE = CONCURRENT,
    RANGE_SIZE = (CONCURRENT - EXCLUSIVE + 1),
    MAX_ENUM = 0x7FFFFFFF
} SharingMode;

typedef enum class Format
{
    UNDEFINED = 0,
    R4G4_UNORM_PACK8 = 1,
    R4G4B4A4_UNORM_PACK16 = 2,
    B4G4R4A4_UNORM_PACK16 = 3,
    R5G6B5_UNORM_PACK16 = 4,
    B5G6R5_UNORM_PACK16 = 5,
    R5G5B5A1_UNORM_PACK16 = 6,
    B5G5R5A1_UNORM_PACK16 = 7,
    A1R5G5B5_UNORM_PACK16 = 8,
    R8_UNORM = 9,
    R8_SNORM = 10,
    R8_USCALED = 11,
    R8_SSCALED = 12,
    R8_UINT = 13,
    R8_SINT = 14,
    R8_SRGB = 15,
    R8G8_UNORM = 16,
    R8G8_SNORM = 17,
    R8G8_USCALED = 18,
    R8G8_SSCALED = 19,
    R8G8_UINT = 20,
    R8G8_SINT = 21,
    R8G8_SRGB = 22,
    R8G8B8_UNORM = 23,
    R8G8B8_SNORM = 24,
    R8G8B8_USCALED = 25,
    R8G8B8_SSCALED = 26,
    R8G8B8_UINT = 27,
    R8G8B8_SINT = 28,
    R8G8B8_SRGB = 29,
    B8G8R8_UNORM = 30,
    B8G8R8_SNORM = 31,
    B8G8R8_USCALED = 32,
    B8G8R8_SSCALED = 33,
    B8G8R8_UINT = 34,
    B8G8R8_SINT = 35,
    B8G8R8_SRGB = 36,
    R8G8B8A8_UNORM = 37,
    R8G8B8A8_SNORM = 38,
    R8G8B8A8_USCALED = 39,
    R8G8B8A8_SSCALED = 40,
    R8G8B8A8_UINT = 41,
    R8G8B8A8_SINT = 42,
    R8G8B8A8_SRGB = 43,
    B8G8R8A8_UNORM = 44,
    B8G8R8A8_SNORM = 45,
    B8G8R8A8_USCALED = 46,
    B8G8R8A8_SSCALED = 47,
    B8G8R8A8_UINT = 48,
    B8G8R8A8_SINT = 49,
    B8G8R8A8_SRGB = 50,
    A8B8G8R8_UNORM_PACK32 = 51,
    A8B8G8R8_SNORM_PACK32 = 52,
    A8B8G8R8_USCALED_PACK32 = 53,
    A8B8G8R8_SSCALED_PACK32 = 54,
    A8B8G8R8_UINT_PACK32 = 55,
    A8B8G8R8_SINT_PACK32 = 56,
    A8B8G8R8_SRGB_PACK32 = 57,
    A2R10G10B10_UNORM_PACK32 = 58,
    A2R10G10B10_SNORM_PACK32 = 59,
    A2R10G10B10_USCALED_PACK32 = 60,
    A2R10G10B10_SSCALED_PACK32 = 61,
    A2R10G10B10_UINT_PACK32 = 62,
    A2R10G10B10_SINT_PACK32 = 63,
    A2B10G10R10_UNORM_PACK32 = 64,
    A2B10G10R10_SNORM_PACK32 = 65,
    A2B10G10R10_USCALED_PACK32 = 66,
    A2B10G10R10_SSCALED_PACK32 = 67,
    A2B10G10R10_UINT_PACK32 = 68,
    A2B10G10R10_SINT_PACK32 = 69,
    R16_UNORM = 70,
    R16_SNORM = 71,
    R16_USCALED = 72,
    R16_SSCALED = 73,
    R16_UINT = 74,
    R16_SINT = 75,
    R16_SFLOAT = 76,
    R16G16_UNORM = 77,
    R16G16_SNORM = 78,
    R16G16_USCALED = 79,
    R16G16_SSCALED = 80,
    R16G16_UINT = 81,
    R16G16_SINT = 82,
    R16G16_SFLOAT = 83,
    R16G16B16_UNORM = 84,
    R16G16B16_SNORM = 85,
    R16G16B16_USCALED = 86,
    R16G16B16_SSCALED = 87,
    R16G16B16_UINT = 88,
    R16G16B16_SINT = 89,
    R16G16B16_SFLOAT = 90,
    R16G16B16A16_UNORM = 91,
    R16G16B16A16_SNORM = 92,
    R16G16B16A16_USCALED = 93,
    R16G16B16A16_SSCALED = 94,
    R16G16B16A16_UINT = 95,
    R16G16B16A16_SINT = 96,
    R16G16B16A16_SFLOAT = 97,
    R32_UINT = 98,
    R32_SINT = 99,
    R32_SFLOAT = 100,
    R32G32_UINT = 101,
    R32G32_SINT = 102,
    R32G32_SFLOAT = 103,
    R32G32B32_UINT = 104,
    R32G32B32_SINT = 105,
    R32G32B32_SFLOAT = 106,
    R32G32B32A32_UINT = 107,
    R32G32B32A32_SINT = 108,
    R32G32B32A32_SFLOAT = 109,
    R64_UINT = 110,
    R64_SINT = 111,
    R64_SFLOAT = 112,
    R64G64_UINT = 113,
    R64G64_SINT = 114,
    R64G64_SFLOAT = 115,
    R64G64B64_UINT = 116,
    R64G64B64_SINT = 117,
    R64G64B64_SFLOAT = 118,
    R64G64B64A64_UINT = 119,
    R64G64B64A64_SINT = 120,
    R64G64B64A64_SFLOAT = 121,
    B10G11R11_UFLOAT_PACK32 = 122,
    E5B9G9R9_UFLOAT_PACK32 = 123,
    D16_UNORM = 124,
    X8_D24_UNORM_PACK32 = 125,
    D32_SFLOAT = 126,
    S8_UINT = 127,
    D16_UNORM_S8_UINT = 128,
    D24_UNORM_S8_UINT = 129,
    D32_SFLOAT_S8_UINT = 130,
    BC1_RGB_UNORM_BLOCK = 131,
    BC1_RGB_SRGB_BLOCK = 132,
    BC1_RGBA_UNORM_BLOCK = 133,
    BC1_RGBA_SRGB_BLOCK = 134,
    BC2_UNORM_BLOCK = 135,
    BC2_SRGB_BLOCK = 136,
    BC3_UNORM_BLOCK = 137,
    BC3_SRGB_BLOCK = 138,
    BC4_UNORM_BLOCK = 139,
    BC4_SNORM_BLOCK = 140,
    BC5_UNORM_BLOCK = 141,
    BC5_SNORM_BLOCK = 142,
    BC6H_UFLOAT_BLOCK = 143,
    BC6H_SFLOAT_BLOCK = 144,
    BC7_UNORM_BLOCK = 145,
    BC7_SRGB_BLOCK = 146,
    ETC2_R8G8B8_UNORM_BLOCK = 147,
    ETC2_R8G8B8_SRGB_BLOCK = 148,
    ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    EAC_R11_UNORM_BLOCK = 153,
    EAC_R11_SNORM_BLOCK = 154,
    EAC_R11G11_UNORM_BLOCK = 155,
    EAC_R11G11_SNORM_BLOCK = 156,
    ASTC_4x4_UNORM_BLOCK = 157,
    ASTC_4x4_SRGB_BLOCK = 158,
    ASTC_5x4_UNORM_BLOCK = 159,
    ASTC_5x4_SRGB_BLOCK = 160,
    ASTC_5x5_UNORM_BLOCK = 161,
    ASTC_5x5_SRGB_BLOCK = 162,
    ASTC_6x5_UNORM_BLOCK = 163,
    ASTC_6x5_SRGB_BLOCK = 164,
    ASTC_6x6_UNORM_BLOCK = 165,
    ASTC_6x6_SRGB_BLOCK = 166,
    ASTC_8x5_UNORM_BLOCK = 167,
    ASTC_8x5_SRGB_BLOCK = 168,
    ASTC_8x6_UNORM_BLOCK = 169,
    ASTC_8x6_SRGB_BLOCK = 170,
    ASTC_8x8_UNORM_BLOCK = 171,
    ASTC_8x8_SRGB_BLOCK = 172,
    ASTC_10x5_UNORM_BLOCK = 173,
    ASTC_10x5_SRGB_BLOCK = 174,
    ASTC_10x6_UNORM_BLOCK = 175,
    ASTC_10x6_SRGB_BLOCK = 176,
    ASTC_10x8_UNORM_BLOCK = 177,
    ASTC_10x8_SRGB_BLOCK = 178,
    ASTC_10x10_UNORM_BLOCK = 179,
    ASTC_10x10_SRGB_BLOCK = 180,
    ASTC_12x10_UNORM_BLOCK = 181,
    ASTC_12x10_SRGB_BLOCK = 182,
    ASTC_12x12_UNORM_BLOCK = 183,
    ASTC_12x12_SRGB_BLOCK = 184,
    G8B8G8R8_422_UNORM = 1000156000,
    B8G8R8G8_422_UNORM = 1000156001,
    G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    G8_B8R8_2PLANE_420_UNORM = 1000156003,
    G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    G8_B8R8_2PLANE_422_UNORM = 1000156005,
    G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    R10X6_UNORM_PACK16 = 1000156007,
    R10X6G10X6_UNORM_2PACK16 = 1000156008,
    R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    R12X4_UNORM_PACK16 = 1000156017,
    R12X4G12X4_UNORM_2PACK16 = 1000156018,
    R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    G16B16G16R16_422_UNORM = 1000156027,
    B16G16R16G16_422_UNORM = 1000156028,
    G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    G16_B16R16_2PLANE_420_UNORM = 1000156030,
    G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    G16_B16R16_2PLANE_422_UNORM = 1000156032,
    G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    G8B8G8R8_422_UNORM_KHR = G8B8G8R8_422_UNORM,
    B8G8R8G8_422_UNORM_KHR = B8G8R8G8_422_UNORM,
    G8_B8_R8_3PLANE_420_UNORM_KHR = G8_B8_R8_3PLANE_420_UNORM,
    G8_B8R8_2PLANE_420_UNORM_KHR = G8_B8R8_2PLANE_420_UNORM,
    G8_B8_R8_3PLANE_422_UNORM_KHR = G8_B8_R8_3PLANE_422_UNORM,
    G8_B8R8_2PLANE_422_UNORM_KHR = G8_B8R8_2PLANE_422_UNORM,
    G8_B8_R8_3PLANE_444_UNORM_KHR = G8_B8_R8_3PLANE_444_UNORM,
    R10X6_UNORM_PACK16_KHR = R10X6_UNORM_PACK16,
    R10X6G10X6_UNORM_2PACK16_KHR = R10X6G10X6_UNORM_2PACK16,
    R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    R12X4_UNORM_PACK16_KHR = R12X4_UNORM_PACK16,
    R12X4G12X4_UNORM_2PACK16_KHR = R12X4G12X4_UNORM_2PACK16,
    R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    G16B16G16R16_422_UNORM_KHR = G16B16G16R16_422_UNORM,
    B16G16R16G16_422_UNORM_KHR = B16G16R16G16_422_UNORM,
    G16_B16_R16_3PLANE_420_UNORM_KHR = G16_B16_R16_3PLANE_420_UNORM,
    G16_B16R16_2PLANE_420_UNORM_KHR = G16_B16R16_2PLANE_420_UNORM,
    G16_B16_R16_3PLANE_422_UNORM_KHR = G16_B16_R16_3PLANE_422_UNORM,
    G16_B16R16_2PLANE_422_UNORM_KHR = G16_B16R16_2PLANE_422_UNORM,
    G16_B16_R16_3PLANE_444_UNORM_KHR = G16_B16_R16_3PLANE_444_UNORM,
    BEGIN_RANGE = UNDEFINED,
    END_RANGE = ASTC_12x12_SRGB_BLOCK,
    RANGE_SIZE = (ASTC_12x12_SRGB_BLOCK - UNDEFINED + 1),
    MAX_ENUM = 0x7FFFFFFF
} Format;

typedef enum class StructureType
{
    APPLICATION_INFO = 0,
    INSTANCE_CREATE_INFO = 1,
    DEVICE_QUEUE_CREATE_INFO = 2,
    DEVICE_CREATE_INFO = 3,
    SUBMIT_INFO = 4,
    MEMORY_ALLOCATE_INFO = 5,
    MAPPED_MEMORY_RANGE = 6,
    BIND_SPARSE_INFO = 7,
    FENCE_CREATE_INFO = 8,
    SEMAPHORE_CREATE_INFO = 9,
    EVENT_CREATE_INFO = 10,
    QUERY_POOL_CREATE_INFO = 11,
    BUFFER_CREATE_INFO = 12,
    BUFFER_VIEW_CREATE_INFO = 13,
    IMAGE_CREATE_INFO = 14,
    IMAGE_VIEW_CREATE_INFO = 15,
    SHADER_MODULE_CREATE_INFO = 16,
    PIPELINE_CACHE_CREATE_INFO = 17,
    PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    GRAPHICS_PIPELINE_CREATE_INFO = 28,
    COMPUTE_PIPELINE_CREATE_INFO = 29,
    PIPELINE_LAYOUT_CREATE_INFO = 30,
    SAMPLER_CREATE_INFO = 31,
    DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    DESCRIPTOR_POOL_CREATE_INFO = 33,
    DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    WRITE_DESCRIPTOR_SET = 35,
    COPY_DESCRIPTOR_SET = 36,
    FRAMEBUFFER_CREATE_INFO = 37,
    RENDER_PASS_CREATE_INFO = 38,
    COMMAND_POOL_CREATE_INFO = 39,
    COMMAND_BUFFER_ALLOCATE_INFO = 40,
    COMMAND_BUFFER_INHERITANCE_INFO = 41,
    COMMAND_BUFFER_BEGIN_INFO = 42,
    RENDER_PASS_BEGIN_INFO = 43,
    BUFFER_MEMORY_BARRIER = 44,
    IMAGE_MEMORY_BARRIER = 45,
    MEMORY_BARRIER = 46,
    LOADER_INSTANCE_CREATE_INFO = 47,
    LOADER_DEVICE_CREATE_INFO = 48,
    PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    BIND_BUFFER_MEMORY_INFO = 1000157000,
    BIND_IMAGE_MEMORY_INFO = 1000157001,
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    MEMORY_REQUIREMENTS_2 = 1000146003,
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    FORMAT_PROPERTIES_2 = 1000059002,
    IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = 1000120000,
    PROTECTED_SUBMIT_INFO = 1000145000,
    PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    DEVICE_QUEUE_INFO_2 = 1000145003,
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    EXTERNAL_FENCE_PROPERTIES = 1000112001,
    EXPORT_FENCE_CREATE_INFO = 1000113000,
    EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = 1000063000,
    SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    PRESENT_INFO_KHR = 1000001001,
    DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    DISPLAY_PRESENT_INFO_KHR = 1000003000,
    XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    MIR_SURFACE_CREATE_INFO_KHR = 1000007000,
    ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,
    DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VALIDATION_FLAGS_EXT = 1000061000,
    VI_SURFACE_CREATE_INFO_NN = 1000062000,
    IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    MEMORY_FD_PROPERTIES_KHR = 1000074001,
    MEMORY_GET_FD_INFO_KHR = 1000074002,
    WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    PRESENT_REGIONS_KHR = 1000084000,
    OBJECT_TABLE_CREATE_INFO_NVX = 1000086000,
    INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX = 1000086001,
    CMD_PROCESS_COMMANDS_INFO_NVX = 1000086002,
    CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX = 1000086003,
    DEVICE_GENERATED_COMMANDS_LIMITS_NVX = 1000086004,
    DEVICE_GENERATED_COMMANDS_FEATURES_NVX = 1000086005,
    PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    SURFACE_CAPABILITIES_2_EXT = 1000090000,
    DISPLAY_POWER_INFO_EXT = 1000091000,
    DEVICE_EVENT_INFO_EXT = 1000091001,
    DISPLAY_EVENT_INFO_EXT = 1000091002,
    SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    HDR_METADATA_EXT = 1000105000,
    ATTACHMENT_DESCRIPTION_2_KHR = 1000109000,
    ATTACHMENT_REFERENCE_2_KHR = 1000109001,
    SUBPASS_DESCRIPTION_2_KHR = 1000109002,
    SUBPASS_DEPENDENCY_2_KHR = 1000109003,
    RENDER_PASS_CREATE_INFO_2_KHR = 1000109004,
    SUBPASS_BEGIN_INFO_KHR = 1000109005,
    SUBPASS_END_INFO_KHR = 1000109006,
    SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    FENCE_GET_FD_INFO_KHR = 1000115001,
    PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    SURFACE_CAPABILITIES_2_KHR = 1000119001,
    SURFACE_FORMAT_2_KHR = 1000119002,
    DISPLAY_PROPERTIES_2_KHR = 1000121000,
    DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    DEBUG_UTILS_LABEL_EXT = 1000128002,
    DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    ANDROID_HARDWARE_ANDROID = 1000129000,
    ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    EXTERNAL_FORMAT_ANDROID = 1000129005,
    PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = 1000130000,
    SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = 1000130001,
    SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    IMAGE_FORMAT_LIST_CREATE_INFO_KHR = 1000147000,
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,
    DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = 1000161000,
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = 1000161001,
    PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = 1000161002,
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = 1000161003,
    DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = 1000161004,
    DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = 1000174000,
    PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = 1000177000,
    IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,
    PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    CHECKPOINT_DATA_NV = 1000206000,
    QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = RENDER_PASS_MULTIVIEW_CREATE_INFO,
    PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    PHYSICAL_DEVICE_FEATURES_2_KHR = PHYSICAL_DEVICE_FEATURES_2,
    PHYSICAL_DEVICE_PROPERTIES_2_KHR = PHYSICAL_DEVICE_PROPERTIES_2,
    FORMAT_PROPERTIES_2_KHR = FORMAT_PROPERTIES_2,
    IMAGE_FORMAT_PROPERTIES_2_KHR = IMAGE_FORMAT_PROPERTIES_2,
    PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    QUEUE_FAMILY_PROPERTIES_2_KHR = QUEUE_FAMILY_PROPERTIES_2,
    PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    MEMORY_ALLOCATE_FLAGS_INFO_KHR = MEMORY_ALLOCATE_FLAGS_INFO,
    DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    DEVICE_GROUP_SUBMIT_INFO_KHR = DEVICE_GROUP_SUBMIT_INFO,
    DEVICE_GROUP_BIND_SPARSE_INFO_KHR = DEVICE_GROUP_BIND_SPARSE_INFO,
    BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = PHYSICAL_DEVICE_GROUP_PROPERTIES,
    DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = DEVICE_GROUP_DEVICE_CREATE_INFO,
    PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    EXTERNAL_BUFFER_PROPERTIES_KHR = EXTERNAL_BUFFER_PROPERTIES,
    PHYSICAL_DEVICE_ID_PROPERTIES_KHR = PHYSICAL_DEVICE_ID_PROPERTIES,
    EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    EXPORT_MEMORY_ALLOCATE_INFO_KHR = EXPORT_MEMORY_ALLOCATE_INFO,
    PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    EXTERNAL_SEMAPHORE_PROPERTIES_KHR = EXTERNAL_SEMAPHORE_PROPERTIES,
    EXPORT_SEMAPHORE_CREATE_INFO_KHR = EXPORT_SEMAPHORE_CREATE_INFO,
    PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    EXTERNAL_FENCE_PROPERTIES_KHR = EXTERNAL_FENCE_PROPERTIES,
    EXPORT_FENCE_CREATE_INFO_KHR = EXPORT_FENCE_CREATE_INFO,
    PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    IMAGE_VIEW_USAGE_CREATE_INFO_KHR = IMAGE_VIEW_USAGE_CREATE_INFO,
    PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES,
    MEMORY_DEDICATED_REQUIREMENTS_KHR = MEMORY_DEDICATED_REQUIREMENTS,
    MEMORY_DEDICATED_ALLOCATE_INFO_KHR = MEMORY_DEDICATED_ALLOCATE_INFO,
    BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    MEMORY_REQUIREMENTS_2_KHR = MEMORY_REQUIREMENTS_2,
    SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    SAMPLER_YCBCR_CONVERSION_INFO_KHR = SAMPLER_YCBCR_CONVERSION_INFO,
    BIND_IMAGE_PLANE_MEMORY_INFO_KHR = BIND_IMAGE_PLANE_MEMORY_INFO,
    IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    BIND_BUFFER_MEMORY_INFO_KHR = BIND_BUFFER_MEMORY_INFO,
    BIND_IMAGE_MEMORY_INFO_KHR = BIND_IMAGE_MEMORY_INFO,
    PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = DESCRIPTOR_SET_LAYOUT_SUPPORT,
    BEGIN_RANGE = APPLICATION_INFO,
    END_RANGE = LOADER_DEVICE_CREATE_INFO,
    RANGE_SIZE = (LOADER_DEVICE_CREATE_INFO - APPLICATION_INFO + 1),
    MAX_ENUM = 0x7FFFFFFF
} StructureType;

typedef enum class VertexInputRate
{
    VERTEX = 0,
    INSTANCE = 1,
    BEGIN_RANGE = VERTEX,
    END_RANGE = INSTANCE,
    RANGE_SIZE = (INSTANCE - VERTEX + 1),
    MAX_ENUM = 0x7FFFFFFF
} VertexInputRate;

typedef enum class PrimitiveTopology
{
    POINT_LIST = 0,
    LINE_LIST = 1,
    LINE_STRIP = 2,
    TRIANGLE_LIST = 3,
    TRIANGLE_STRIP = 4,
    TRIANGLE_FAN = 5,
    LINE_LIST_WITH_ADJACENCY = 6,
    LINE_STRIP_WITH_ADJACENCY = 7,
    TRIANGLE_LIST_WITH_ADJACENCY = 8,
    TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    PATCH_LIST = 10,
    BEGIN_RANGE = POINT_LIST,
    END_RANGE = PATCH_LIST,
    RANGE_SIZE = (PATCH_LIST - POINT_LIST + 1),
    MAX_ENUM = 0x7FFFFFFF
} PrimitiveTopology;

typedef enum class PolygonMode
{
    FILL = 0,
    LINE = 1,
    POINT = 2,
    FILL_RECTANGLE_NV = 1000153000,
    BEGIN_RANGE = FILL,
    END_RANGE = POINT,
    RANGE_SIZE = (POINT - FILL + 1),
    MAX_ENUM = 0x7FFFFFFF
} PolygonMode;

typedef enum class FrontFace
{
    COUNTER_CLOCKWISE = 0,
    CLOCKWISE = 1,
    BEGIN_RANGE = COUNTER_CLOCKWISE,
    END_RANGE = CLOCKWISE,
    RANGE_SIZE = (CLOCKWISE - COUNTER_CLOCKWISE + 1),
    MAX_ENUM = 0x7FFFFFFF
} FrontFace;

typedef enum CullMode
{
    NONE = 0,
    FRONT_BIT = 0x00000001,
    BACK_BIT = 0x00000002,
    FRONT_AND_BACK = 0x00000003,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} CullMode;

typedef Flags CullModeFlags;
typedef Flags PipelineMultisampleStateCreateFlags;
typedef Flags PipelineDepthStencilStateCreateFlags;
typedef Flags PipelineColorBlendStateCreateFlags;

typedef enum class SampleCountFlagBits
{
    SAMPLE_COUNT_1_BIT = 0x00000001,
    SAMPLE_COUNT_2_BIT = 0x00000002,
    SAMPLE_COUNT_4_BIT = 0x00000004,
    SAMPLE_COUNT_8_BIT = 0x00000008,
    SAMPLE_COUNT_16_BIT = 0x00000010,
    SAMPLE_COUNT_32_BIT = 0x00000020,
    SAMPLE_COUNT_64_BIT = 0x00000040,
    SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} SampleCountFlagBits;

typedef enum class CompareOp
{
    NEVER = 0,
    LESS = 1,
    EQUAL = 2,
    LESS_OR_EQUAL = 3,
    GREATER = 4,
    NOT_EQUAL = 5,
    GREATER_OR_EQUAL = 6,
    ALWAYS = 7,
    BEGIN_RANGE = NEVER,
    END_RANGE = ALWAYS,
    RANGE_SIZE = (ALWAYS - NEVER + 1),
    MAX_ENUM = 0x7FFFFFFF
} CompareOp;

typedef enum class StencilOp
{
    KEEP = 0,
    ZERO = 1,
    REPLACE = 2,
    INCREMENT_AND_CLAMP = 3,
    DECREMENT_AND_CLAMP = 4,
    INVERT = 5,
    INCREMENT_AND_WRAP = 6,
    DECREMENT_AND_WRAP = 7,
    BEGIN_RANGE = KEEP,
    END_RANGE = DECREMENT_AND_WRAP,
    RANGE_SIZE = (DECREMENT_AND_WRAP - KEEP + 1),
    MAX_ENUM = 0x7FFFFFFF
} StencilOp;

typedef enum class LogicOp
{
    CLEAR = 0,
    AND = 1,
    AND_REVERSE = 2,
    COPY = 3,
    AND_INVERTED = 4,
    NO_OP = 5,
    XOR = 6,
    OR = 7,
    NOR = 8,
    EQUIVALENT = 9,
    INVERT = 10,
    OR_REVERSE = 11,
    COPY_INVERTED = 12,
    OR_INVERTED = 13,
    NAND = 14,
    SET = 15,
    BEGIN_RANGE = CLEAR,
    END_RANGE = SET,
    RANGE_SIZE = (SET - CLEAR + 1),
    MAX_ENUM = 0x7FFFFFFF
} LogicOp;

typedef enum class BlendFactor
{
    ZERO = 0,
    ONE = 1,
    SRC_COLOR = 2,
    ONE_MINUS_SRC_COLOR = 3,
    DST_COLOR = 4,
    ONE_MINUS_DST_COLOR = 5,
    SRC_ALPHA = 6,
    ONE_MINUS_SRC_ALPHA = 7,
    DST_ALPHA = 8,
    ONE_MINUS_DST_ALPHA = 9,
    CONSTANT_COLOR = 10,
    ONE_MINUS_CONSTANT_COLOR = 11,
    CONSTANT_ALPHA = 12,
    ONE_MINUS_CONSTANT_ALPHA = 13,
    SRC_ALPHA_SATURATE = 14,
    SRC1_COLOR = 15,
    ONE_MINUS_SRC1_COLOR = 16,
    SRC1_ALPHA = 17,
    ONE_MINUS_SRC1_ALPHA = 18,
    BEGIN_RANGE = ZERO,
    END_RANGE = ONE_MINUS_SRC1_ALPHA,
    RANGE_SIZE = (ONE_MINUS_SRC1_ALPHA - ZERO + 1),
    MAX_ENUM = 0x7FFFFFFF
} BlendFactor;

typedef enum class BlendOp
{
    ADD = 0,
    SUBTRACT = 1,
    REVERSE_SUBTRACT = 2,
    MIN = 3,
    MAX = 4,
    ZERO_EXT = 1000148000,
    SRC_EXT = 1000148001,
    DST_EXT = 1000148002,
    SRC_OVER_EXT = 1000148003,
    DST_OVER_EXT = 1000148004,
    SRC_IN_EXT = 1000148005,
    DST_IN_EXT = 1000148006,
    SRC_OUT_EXT = 1000148007,
    DST_OUT_EXT = 1000148008,
    SRC_ATOP_EXT = 1000148009,
    DST_ATOP_EXT = 1000148010,
    XOR_EXT = 1000148011,
    MULTIPLY_EXT = 1000148012,
    SCREEN_EXT = 1000148013,
    OVERLAY_EXT = 1000148014,
    DARKEN_EXT = 1000148015,
    LIGHTEN_EXT = 1000148016,
    COLORDODGE_EXT = 1000148017,
    COLORBURN_EXT = 1000148018,
    HARDLIGHT_EXT = 1000148019,
    SOFTLIGHT_EXT = 1000148020,
    DIFFERENCE_EXT = 1000148021,
    EXCLUSION_EXT = 1000148022,
    INVERT_EXT = 1000148023,
    INVERT_RGB_EXT = 1000148024,
    LINEARDODGE_EXT = 1000148025,
    LINEARBURN_EXT = 1000148026,
    VIVIDLIGHT_EXT = 1000148027,
    LINEARLIGHT_EXT = 1000148028,
    PINLIGHT_EXT = 1000148029,
    HARDMIX_EXT = 1000148030,
    HSL_HUE_EXT = 1000148031,
    HSL_SATURATION_EXT = 1000148032,
    HSL_COLOR_EXT = 1000148033,
    HSL_LUMINOSITY_EXT = 1000148034,
    PLUS_EXT = 1000148035,
    PLUS_CLAMPED_EXT = 1000148036,
    PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    PLUS_DARKER_EXT = 1000148038,
    MINUS_EXT = 1000148039,
    MINUS_CLAMPED_EXT = 1000148040,
    CONTRAST_EXT = 1000148041,
    INVERT_OVG_EXT = 1000148042,
    RED_EXT = 1000148043,
    GREEN_EXT = 1000148044,
    BLUE_EXT = 1000148045,
    BEGIN_RANGE = ADD,
    END_RANGE = MAX,
    RANGE_SIZE = (MAX - ADD + 1),
    MAX_ENUM = 0x7FFFFFFF
} BlendOp;

typedef enum class DynamicState
{
    VIEWPORT = 0,
    SCISSOR = 1,
    LINE_WIDTH = 2,
    DEPTH_BIAS = 3,
    BLEND_CONSTANTS = 4,
    DEPTH_BOUNDS = 5,
    STENCIL_COMPARE_MASK = 6,
    STENCIL_WRITE_MASK = 7,
    STENCIL_REFERENCE = 8,
    VIEWPORT_W_SCALING_NV = 1000087000,
    DISCARD_RECTANGLE_EXT = 1000099000,
    SAMPLE_LOCATIONS_EXT = 1000143000,
    BEGIN_RANGE = VIEWPORT,
    END_RANGE = STENCIL_REFERENCE,
    RANGE_SIZE = (STENCIL_REFERENCE - VIEWPORT + 1),
    MAX_ENUM = 0x7FFFFFFF
} DynamicState;

typedef enum class PipelineCreateFlagBits
{
    DISABLE_OPTIMIZATION_BIT = 0x00000001,
    ALLOW_DERIVATIVES_BIT = 0x00000002,
    DERIVATIVE_BIT = 0x00000004,
    VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
    DISPATCH_BASE = 0x00000010,
    VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    DISPATCH_BASE_KHR = DISPATCH_BASE,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} PipelineCreateFlagBits;

typedef enum class ShaderStageFlagBits
{
    VERTEX_BIT = 0x00000001,
    TESSELLATION_CONTROL_BIT = 0x00000002,
    TESSELLATION_EVALUATION_BIT = 0x00000004,
    GEOMETRY_BIT = 0x00000008,
    FRAGMENT_BIT = 0x00000010,
    COMPUTE_BIT = 0x00000020,
    ALL_GRAPHICS = 0x0000001F,
    ALL = 0x7FFFFFFF,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} ShaderStageFlagBits;

typedef enum class DescriptorPoolCreateFlagBits
{
    FREE_DESCRIPTOR_SET_BIT = 0x00000001,
    UPDATE_AFTER_BIND_BIT_EXT = 0x00000002,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} DescriptorPoolCreateFlagBits;

typedef enum class AttachmentDescriptionFlagBits
{
    MAY_ALIAS_BIT = 0x00000001,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} AttachmentDescriptionFlagBits;

typedef enum class AttachmentLoadOp
{
    LOAD = 0,
    CLEAR = 1,
    DONT_CARE = 2,
    BEGIN_RANGE = LOAD,
    END_RANGE = DONT_CARE,
    RANGE_SIZE = (DONT_CARE - LOAD + 1),
    MAX_ENUM = 0x7FFFFFFF
} AttachmentLoadOp;

typedef enum class AttachmentStoreOp
{
    STORE = 0,
    DONT_CARE = 1,
    BEGIN_RANGE = STORE,
    END_RANGE = DONT_CARE,
    RANGE_SIZE = (DONT_CARE - STORE + 1),
    MAX_ENUM = 0x7FFFFFFF
} AttachmentStoreOp;

typedef enum class PipelineBindPoint
{
    GRAPHICS = 0,
    COMPUTE = 1,
    BEGIN_RANGE = GRAPHICS,
    END_RANGE = COMPUTE,
    RANGE_SIZE = (COMPUTE - GRAPHICS + 1),
    MAX_ENUM = 0x7FFFFFFF
} PipelineBindPoint;

typedef enum class PipelineStageFlagBits
{
    TOP_OF_PIPE_BIT = 0x00000001,
    DRAW_INDIRECT_BIT = 0x00000002,
    VERTEX_INPUT_BIT = 0x00000004,
    VERTEX_SHADER_BIT = 0x00000008,
    TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    GEOMETRY_SHADER_BIT = 0x00000040,
    FRAGMENT_SHADER_BIT = 0x00000080,
    EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    COMPUTE_SHADER_BIT = 0x00000800,
    TRANSFER_BIT = 0x00001000,
    BOTTOM_OF_PIPE_BIT = 0x00002000,
    HOST_BIT = 0x00004000,
    ALL_GRAPHICS_BIT = 0x00008000,
    ALL_COMMANDS_BIT = 0x00010000,
    CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
    COMMAND_PROCESS_BIT_NVX = 0x00020000,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} PipelineStageFlagBits;
typedef Flags PipelineStageFlags;
typedef Flags MemoryMapFlags;

typedef enum class AccessFlagBits
{
    INDIRECT_COMMAND_READ_BIT = 0x00000001,
    INDEX_READ_BIT = 0x00000002,
    VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    UNIFORM_READ_BIT = 0x00000008,
    INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    SHADER_READ_BIT = 0x00000020,
    SHADER_WRITE_BIT = 0x00000040,
    COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    TRANSFER_READ_BIT = 0x00000800,
    TRANSFER_WRITE_BIT = 0x00001000,
    HOST_READ_BIT = 0x00002000,
    HOST_WRITE_BIT = 0x00004000,
    MEMORY_READ_BIT = 0x00008000,
    MEMORY_WRITE_BIT = 0x00010000,
    CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    COMMAND_PROCESS_READ_BIT_NVX = 0x00020000,
    COMMAND_PROCESS_WRITE_BIT_NVX = 0x00040000,
    COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} AccessFlagBits;
typedef Flags AccessFlags;

typedef enum class DependencyFlagBits
{
    BY_REGION_BIT = 0x00000001,
    DEVICE_GROUP_BIT = 0x00000004,
    VIEW_LOCAL_BIT = 0x00000002,
    VIEW_LOCAL_BIT_KHR = VIEW_LOCAL_BIT,
    DEVICE_GROUP_BIT_KHR = DEVICE_GROUP_BIT,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} DependencyFlagBits;
typedef Flags DependencyFlags;

typedef enum class ImageLayout
{
    UNDEFINED = 0,
    GENERAL = 1,
    COLOR_ATTACHMENT_OPTIMAL = 2,
    DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    SHADER_READ_ONLY_OPTIMAL = 5,
    TRANSFER_SRC_OPTIMAL = 6,
    TRANSFER_DST_OPTIMAL = 7,
    PREINITIALIZED = 8,
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    PRESENT_SRC_KHR = 1000001002,
    SHARED_PRESENT_KHR = 1000111000,
    DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    BEGIN_RANGE = UNDEFINED,
    END_RANGE = PREINITIALIZED,
    RANGE_SIZE = (PREINITIALIZED - UNDEFINED + 1),
    MAX_ENUM = 0x7FFFFFFF
} ImageLayout;

typedef enum ImageViewType
{
    IMAGE_TYPE_1D = 0,
    IMAGE_TYPE_2D = 1,
    IMAGE_TYPE_3D = 2,
    IMAGE_TYPE_CUBE = 3,
    IMAGE_TYPE_1D_ARRAY = 4,
    IMAGE_TYPE_2D_ARRAY = 5,
    IMAGE_TYPE_CUBE_ARRAY = 6,
    IMAGE_TYPE_BEGIN_RANGE = IMAGE_TYPE_1D,
    IMAGE_TYPE_END_RANGE = IMAGE_TYPE_CUBE_ARRAY,
    IMAGE_TYPE_RANGE_SIZE = (IMAGE_TYPE_CUBE_ARRAY - IMAGE_TYPE_1D + 1),
    IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
} ImageViewType;

typedef enum ComponentSwizzle
{
    IMAGE_TYPEIDENTITY = 0,
    IMAGE_TYPEZERO = 1,
    IMAGE_TYPEONE = 2,
    IMAGE_TYPER = 3,
    IMAGE_TYPEG = 4,
    IMAGE_TYPEB = 5,
    IMAGE_TYPEA = 6,
    IMAGE_TYPEBEGIN_RANGE = IMAGE_TYPEIDENTITY,
    IMAGE_TYPEEND_RANGE = IMAGE_TYPEA,
    IMAGE_TYPERANGE_SIZE = (IMAGE_TYPEA - IMAGE_TYPEIDENTITY + 1),
    IMAGE_TYPEMAX_ENUM = 0x7FFFFFFF
} ComponentSwizzle;

typedef enum class SubpassDescriptionFlagBits
{
    PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
    PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} SubpassDescriptionFlagBits;

typedef enum class ImageUsageFlagBits
{
    TRANSFER_SRC_BIT = 0x00000001,
    TRANSFER_DST_BIT = 0x00000002,
    SAMPLED_BIT = 0x00000004,
    STORAGE_BIT = 0x00000008,
    COLOR_ATTACHMENT_BIT = 0x00000010,
    DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    TRANSIENT_ATTACHMENT_BIT = 0x00000040,
    INPUT_ATTACHMENT_BIT = 0x00000080,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} ImageUsageFlagBits;
typedef Flags ImageUsageFlags;

typedef enum class ImageCreateFlagBits
{
    SPARSE_BINDING_BIT = 0x00000001,
    SPARSE_RESIDENCY_BIT = 0x00000002,
    SPARSE_ALIASED_BIT = 0x00000004,
    MUTABLE_FORMAT_BIT = 0x00000008,
    CUBE_COMPATIBLE_BIT = 0x00000010,
    ALIAS_BIT = 0x00000400,
    SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
    FLAG_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
    BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
    EXTENDED_USAGE_BIT = 0x00000100,
    PROTECTED_BIT = 0x00000800,
    DISJOINT_BIT = 0x00000200,
    SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = SPLIT_INSTANCE_BIND_REGIONS_BIT,
    FLAG_2D_ARRAY_COMPATIBLE_BIT_KHR = FLAG_2D_ARRAY_COMPATIBLE_BIT,
    BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    EXTENDED_USAGE_BIT_KHR = EXTENDED_USAGE_BIT,
    DISJOINT_BIT_KHR = DISJOINT_BIT,
    ALIAS_BIT_KHR = ALIAS_BIT,
    FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
} ImageCreateFlagBits;
typedef Flags ImageCreateFlags;

typedef enum class ImageType
{
    IMAGE_TYPE_1D = 0,
    IMAGE_TYPE_2D = 1,
    IMAGE_TYPE_3D = 2,
    IMAGE_TYPE_BEGIN_RANGE = IMAGE_TYPE_1D,
    IMAGE_TYPE_END_RANGE = IMAGE_TYPE_3D,
    IMAGE_TYPE_RANGE_SIZE = (IMAGE_TYPE_3D - IMAGE_TYPE_1D + 1),
    IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
} ImageType;

typedef enum class ImageTiling
{
    OPTIMAL = 0,
    LINEAR = 1,
    BEGIN_RANGE = OPTIMAL,
    END_RANGE = LINEAR,
    RANGE_SIZE = (LINEAR - OPTIMAL + 1),
    MAX_ENUM = 0x7FFFFFFF
} ImageTiling;

typedef enum class DescriptorType
{
    SAMPLER = 0,
    COMBINED_IMAGE_SAMPLER = 1,
    SAMPLED_IMAGE = 2,
    STORAGE_IMAGE = 3,
    UNIFORM_TEXEL_BUFFER = 4,
    STORAGE_TEXEL_BUFFER = 5,
    UNIFORM_BUFFER = 6,
    STORAGE_BUFFER = 7,
    UNIFORM_BUFFER_DYNAMIC = 8,
    STORAGE_BUFFER_DYNAMIC = 9,
    INPUT_ATTACHMENT = 10,
    BEGIN_RANGE = SAMPLER,
    END_RANGE = INPUT_ATTACHMENT,
    RANGE_SIZE = (INPUT_ATTACHMENT - SAMPLER + 1),
    MAX_ENUM = 0x7FFFFFFF
} DescriptorType;

typedef struct Viewport
{
    std::int32_t x;
    std::int32_t y;
    std::int32_t width;
    std::int32_t height;
    float minDepth;
    float maxDepth;
} Viewport;

typedef struct Scissor
{
    std::uint32_t x;
    std::uint32_t y;
    std::uint32_t width;
    std::uint32_t height;
} Scissor;

typedef struct VertexInputAttributeDescription
{
    uint32_t location;
    uint32_t binding;
    Format format;
    uint32_t offset;
} VertexInputAttributeDescription;

typedef struct VertexInputBindingDescription
{
    uint32_t binding;
    uint32_t stride;
    VertexInputRate inputRate;
} VertexInputBindingDescription;

typedef struct PipelineVertexInputStateCreateInfo
{
    PipelineVertexInputStateCreateFlags flags;
    std::vector<VertexInputBindingDescription> vertexBindingDescriptions;
    std::vector<VertexInputAttributeDescription> vertexAttributeDescriptions;
} PipelineVertexInputStateCreateInfo;

typedef struct PipelineInputAssemblyStateCreateInfo
{
    PipelineInputAssemblyStateCreateFlags flags;
    PrimitiveTopology topology;
    Bool32 primitiveRestartEnable;
} PipelineInputAssemblyStateCreateInfo;

typedef struct PipelineRasterizationStateCreateInfo
{
    PipelineRasterizationStateCreateFlags flags;
    Bool32 depthClampEnable;
    Bool32 rasterizerDiscardEnable;
    PolygonMode polygonMode;
    CullModeFlags cullMode;
    FrontFace frontFace;
    Bool32 depthBiasEnable;
    float depthBiasConstantFactor;
    float depthBiasClamp;
    float depthBiasSlopeFactor;
    float lineWidth;
} PipelineRasterizationStateCreateInfo;

typedef struct PipelineMultisampleStateCreateInfo
{
    PipelineMultisampleStateCreateFlags flags;
    SampleCountFlagBits rasterizationSamples;
    Bool32 sampleShadingEnable;
    float minSampleShading;
    Bool32 alphaToCoverageEnable;
    Bool32 alphaToOneEnable;
} PipelineMultisampleStateCreateInfo;

typedef struct StencilOpState
{
    StencilOp failOp;
    StencilOp passOp;
    StencilOp depthFailOp;
    CompareOp compareOp;
    uint32_t compareMask;
    uint32_t writeMask;
    uint32_t reference;
} StencilOpState;

typedef struct PipelineDepthStencilStateCreateInfo
{
    PipelineDepthStencilStateCreateFlags flags;
    Bool32 depthTestEnable;
    Bool32 depthWriteEnable;
    CompareOp depthCompareOp;
    Bool32 depthBoundsTestEnable;
    Bool32 stencilTestEnable;
    StencilOpState front;
    StencilOpState back;
    float minDepthBounds;
    float maxDepthBounds;
} PipelineDepthStencilStateCreateInfo;

typedef struct PipelineColorBlendAttachmentState
{
    Bool32 blendEnable;
    BlendFactor srcColorBlendFactor;
    BlendFactor dstColorBlendFactor;
    BlendOp colorBlendOp;
    BlendFactor srcAlphaBlendFactor;
    BlendFactor dstAlphaBlendFactor;
    BlendOp alphaBlendOp;
    ColorComponentFlags colorWriteMask;
} PipelineColorBlendAttachmentState;

typedef struct PipelineColorBlendStateCreateInfo
{
    PipelineColorBlendStateCreateFlags flags;
    Bool32 logicOpEnable;
    LogicOp logicOp;
    std::vector<PipelineColorBlendAttachmentState> attachments;
    float blendConstants[4];
} PipelineColorBlendStateCreateInfo;

typedef struct SpecializationMapEntry
{
    uint32_t constantID;
    uint32_t offset;
    size_t size;
} SpecializationMapEntry;

typedef struct SpecializationInfo
{
    std::vector<SpecializationMapEntry> mapEntries;
    size_t dataSize;
    const void* pData;
} SpecializationInfo;

typedef struct PipelineShaderStageCreateInfo
{
    PipelineShaderStageCreateFlags flags;
    ShaderStageFlagBits stage;
    Shader* shader;
    std::string entryName;
    const SpecializationInfo* pSpecializationInfo;
} PipelineShaderStageCreateInfo;

typedef struct PipelineTessellationStateCreateInfo
{
    PipelineTessellationStateCreateFlags flags;
    uint32_t patchControlPoints;
} PipelineTessellationStateCreateInfo;


typedef struct PipelineViewportStateCreateInfo
{
    PipelineViewportStateCreateFlags flags;
    std::vector<Viewport> viewports;
    std::vector<Scissor> scissors;
} PipelineViewportStateCreateInfo;

typedef struct PipelineDynamicStateCreateInfo
{
    PipelineDynamicStateCreateFlags flags;
    std::vector<DynamicState> dynamicStates;
} PipelineDynamicStateCreateInfo;

typedef struct StageCreateInfo
{
    PipelineShaderStageCreateInfo stage;
    PipelineVertexInputStateCreateInfo vertexInputState;
    PipelineInputAssemblyStateCreateInfo inputAssemblyState;
    PipelineViewportStateCreateInfo viewportState;
    PipelineRasterizationStateCreateInfo rasterizationState;
    PipelineMultisampleStateCreateInfo multisampleState;
    PipelineDepthStencilStateCreateInfo depthStencilState;
    PipelineColorBlendStateCreateInfo colorBlendState;
    PipelineDynamicStateCreateInfo dynamicState;
} StageCreateInfo;

typedef struct GraphicsPipelineCreateInfo
{
    PipelineCreateFlags flags;
    std::vector<StageCreateInfo> stateCreateInfos;
    //    NativePipelineLayout          layout;
    NativeRenderPass renderPass;
    uint32_t subpass;
    NativePipeline basePipelineHandle;
    int32_t basePipelineIndex;
} GraphicsPipelineCreateInfo;

typedef struct AttachmentDescription
{
    AttachmentDescriptionFlags flags;
    Format format;
    SampleCountFlagBits samples;
    AttachmentLoadOp loadOp;
    AttachmentStoreOp storeOp;
    AttachmentLoadOp stencilLoadOp;
    AttachmentStoreOp stencilStoreOp;
    ImageLayout initialLayout;
    ImageLayout finalLayout;
} AttachmentDescription;

typedef struct SubpassDependency
{
    uint32_t srcSubpass;
    uint32_t dstSubpass;
    PipelineStageFlags srcStageMask;
    PipelineStageFlags dstStageMask;
    AccessFlags srcAccessMask;
    AccessFlags dstAccessMask;
    DependencyFlags dependencyFlags;
} SubpassDependency;


typedef struct AttachmentReference
{
    uint32_t attachment;
    ImageLayout layout;
} AttachmentReference;

typedef struct SubpassDescription
{
    SubpassDescriptionFlags flags;
    PipelineBindPoint pipelineBindPoint;
    std::vector<AttachmentReference> inputAttachments;
    std::vector<AttachmentReference> colorAttachments;
    std::vector<AttachmentReference> resolveAttachments;
    std::vector<AttachmentReference> depthStencilAttachment;
    std::vector<std::uint32_t> preserveAttachments;
} SubpassDescription;

typedef struct RenderPassCreateInfo
{
    RenderPassCreateFlags flags;
    std::vector<AttachmentDescription> attachments;
    std::vector<SubpassDescription> subpasses;
    std::vector<SubpassDependency> dependencies;
} RenderPassCreateInfo;

typedef struct Extent2D
{
    uint32_t width;
    uint32_t height;
} Extent2D;

typedef struct Extent3D
{
    uint32_t width;
    uint32_t height;
    uint32_t depth;
    
    Extent3D() = default;
    
    Extent3D(const Extent2D &extent2D)
    {
        this->width = extent2D.width;
        this->height = extent2D.height;
        this->depth = 1;
    }
    
    Extent3D(uint32_t width, uint32_t height, uint32_t depth)
        : width(width), height(height), depth(depth)
    {}
    
    Extent3D &operator=(const Extent2D &extent2D)
    {
        this->width = extent2D.width;
        this->height = extent2D.height;
        this->depth = 1;
        return *this;
    }
} Extent3D;


typedef struct ImageCreateInfo
{
    ImageCreateFlags flags;
    ImageType imageType;
    Format format;
    Extent3D extent;
    uint32_t mipLevels;
    uint32_t arrayLayers;
    SampleCountFlagBits samples;
    ImageTiling tiling;
    ImageUsageFlags usage;
    SharingMode sharingMode;
    ImageLayout initialLayout;
    const void* imageData;
} ImageCreateInfo;

typedef struct DescriptorSetLayoutBinding
{
    uint32_t binding;
    DescriptorType descriptorType;
    uint32_t descriptorCount;
    ShaderStageFlags stageFlags;
} DescriptorSetLayoutBinding;

typedef struct DescriptorSetLayoutCreateInfo
{
    std::vector<DescriptorSetLayoutBinding> bindings;
} DescriptorSetLayoutCreateInfo;

NS_RHI_END

#endif //ALITA_RHIFLAGS_H
