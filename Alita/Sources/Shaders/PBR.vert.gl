#ifndef USE_NORMAL
#define USE_NORMAL 0
#endif

#ifndef USE_UV0
#define USE_UV0 0
#endif

// ++++++++++++++++ start attributes
layout(location = IA_LOCATION_POSITION) in vec3 inPosition;
#if USE_NORMAL
layout(location = IA_LOCATION_NORMAL) in vec3 inNormal;
#endif 
#if USE_TANGENT
layout(location = IA_LOCATION_TANGENT) in vec3 inTangent;
#endif 
#if USE_BITANGENT
layout(location = IA_LOCATION_BITANGENT) in vec3 inBiTangent;
#endif 
#if USE_UV0
layout(location = IA_LOCATION_TEXCOORD) in vec2 inTexCoord;
#endif
// ---------------- end of attributes

layout(binding = 1) uniform Batch {
    mat4 WorldMatrix;
} uBatch;

layout(location = 0) out vec4 _WorldPosition;

#if USE_NORMAL
layout(location = 1) out vec3 _WorldNormal;
#endif

#if USE_UV0
layout(location = 2) out vec2 _UV0;
#endif

#if USE_NORMAL_MAP && USE_TANGENT && USE_BITANGENT
layout(location = 3) out mat3 _TBN;
#endif

void TShading() {
    gl_Position = uGlobal.ProjMatrix * uGlobal.ViewMatrix * uBatch.WorldMatrix * vec4(inPosition, 1.0);
    _WorldPosition = (uBatch.WorldMatrix * vec4(inPosition, 1.0));

#if USE_NORMAL
    _WorldNormal =  normalize((transpose(inverse(uBatch.WorldMatrix)) * vec4(inNormal, 1.0)).xyz);
#endif

#if USE_NORMAL_MAP && USE_TANGENT && USE_BITANGENT
    vec3 T = normalize(vec3(uBatch.WorldMatrix * vec4(inTangent,   0.0)));
    vec3 B = normalize(vec3(uBatch.WorldMatrix * vec4(inBiTangent, 0.0)));
    vec3 N = normalize(vec3(uBatch.WorldMatrix * vec4(inNormal,    0.0)));
    _TBN = mat3(T, B, N);
#endif

#if USE_UV0
    _UV0  = inTexCoord;
#endif
}

void TGBufferGen() {
    gl_Position = uGlobal.ViewProjMatrix * uBatch.WorldMatrix * vec4(inPosition, 1.0);
    _WorldPosition = (uBatch.WorldMatrix * vec4(inPosition, 1.0));

#if USE_NORMAL
    _WorldNormal =  normalize((transpose(inverse(uBatch.WorldMatrix)) * vec4(inNormal, 1.0)).xyz);
#endif

#if USE_NORMAL_MAP && USE_TANGENT && USE_BITANGENT
    vec3 T = normalize(vec3(uBatch.WorldMatrix * vec4(inTangent,   0.0)));
    vec3 B = normalize(vec3(uBatch.WorldMatrix * vec4(inBiTangent, 0.0)));
    vec3 N = normalize(vec3(uBatch.WorldMatrix * vec4(inNormal,    0.0)));
    _TBN = mat3(T, B, N);
#endif

#if USE_UV0
    _UV0  = inTexCoord;
#endif
}

void TShadowMapGen() 
{
    gl_Position = uGlobal.ShadowViewProjMatrix * uBatch.WorldMatrix * vec4(inPosition, 1.0);
    gl_Position /= gl_Position.w;
}