
#ifndef USE_NORMAL
#define USE_NORMAL 0
#endif

#ifndef USE_UV0
#define USE_UV0 0
#endif

layout(binding = 2) uniform ShadingBuffer {
    vec4 emissiveFactor;
    vec4 baseColorFactor;
    float metallicFactor;
    float roughnessFactor;
} uShading;

layout(location = 0) in vec3 _WorldPosition;

#if USE_NORMAL
layout(location = 1) in vec3 _WorldNormal;
#endif

#if USE_UV0
layout(location = 2) in vec2 _UV0;
#endif

layout(binding = 11) uniform texture2D   tAlbedo;
layout(binding = 12) uniform sampler     sAlbedo;

layout(location = 0) out vec4 OutColor;
#if GEN_GBUFFER_PASS
layout(location = 1) out vec4 GNormal;
layout(location = 2) out vec4 GPosition;
layout(location = 3) out vec4 GMaterial;
#endif

void TShading() {
    vec4 diffuse = uShading.baseColorFactor;

#if USE_UV0
    diffuse = texture(sampler2D(tAlbedo, sAlbedo), _UV0);
#endif

#if USE_NORMAL
    vec3 lightDir = normalize(uGlobal.EyePos.xyz - _WorldPosition);
    float specular = clamp(dot(lightDir, normalize(_WorldNormal)), 0, 1);
    diffuse.xyz *= specular * uGlobal.SunLightColor.xyz * uGlobal.SunLightColor.a;
#endif

    OutColor = vec4(diffuse.xyz + uShading.emissiveFactor.xyz , 1.0);
}

void TGBufferGen() {
    vec4 diffuse = uShading.baseColorFactor;
#if USE_UV0
    diffuse = texture(sampler2D(tAlbedo, sAlbedo), _UV0);
#endif
    OutColor = diffuse;

#if GEN_GBUFFER_PASS
    GNormal = vec4(normalize(_WorldNormal) * 0.5 + vec3(0.5, 0.5, 0.5), 0.0);
    GPosition.xyz = _WorldPosition.xyz;
    GMaterial = vec4(uShading.metallicFactor, uShading.roughnessFactor, 0, 0);
#endif
}