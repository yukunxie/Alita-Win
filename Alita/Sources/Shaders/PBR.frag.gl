
#ifndef USE_NORMAL
#define USE_NORMAL 0
#endif

#ifndef USE_UV0
#define USE_UV0 0
#endif

layout(binding = 2) uniform ShadingBuffer {
    vec4 emissiveFactor;
    vec4 baseColorFactor;
    float metallicFactor;
    float roughnessFactor;
} uShading;

layout(location = 0) in vec4 _WorldPosition;

#if USE_NORMAL
layout(location = 1) in vec3 _WorldNormal;
#endif

#if USE_UV0
layout(location = 2) in vec2 _UV0;
#endif

#if USE_NORMAL_MAP && USE_TANGENT && USE_BITANGENT
layout(location = 3) in mat3 _TBN;
#endif

layout(binding = 11) uniform texture2D   tAlbedo;
layout(binding = 12) uniform sampler     sAlbedo;

#if USE_NORMAL_MAP
layout(binding = 13) uniform texture2D   tNormalMap;
layout(binding = 14) uniform sampler     sNormalMap;
#endif

#if USE_OCCLUSION_MAP
layout(binding = 15) uniform texture2D   tOcclusionMap;
layout(binding = 16) uniform sampler     sOcclusionMap;
#endif

#if USE_METALLIC_ROUGHNESS_MAP
layout(binding = 17) uniform texture2D   tMetallicRoughnessMap;
layout(binding = 18) uniform sampler     sMetallicRoughnessMap;
#endif

#if USE_EMISSIVE_MAP
layout(binding = 19) uniform texture2D   tEmissiveMap;
layout(binding = 20) uniform sampler     sEmissiveMap;
#endif

// output

layout(location = 0) out vec4 OutColor;
#if GEN_GBUFFER_PASS
layout(location = 1) out vec4 GEmissive;
layout(location = 2) out vec4 GNormal;
layout(location = 3) out vec4 GPosition;
// x - metallic, y - roughness, w - "rim" lighting
layout(location = 4) out vec4 GMaterial;
#endif

void TShading() {
    vec4 diffuse = uShading.baseColorFactor;

#if USE_UV0
    diffuse *= texture(sampler2D(tAlbedo, sAlbedo), _UV0);
#endif

#if USE_NORMAL
    vec3 lightDir = normalize(uGlobal.EyePos.xyz - _WorldPosition.xyz);
    float specular = clamp(dot(lightDir, normalize(_WorldNormal)), 0, 1);
    diffuse.xyz *= specular * uGlobal.SunLightColor.xyz * uGlobal.SunLightColor.a;
#endif

    OutColor = vec4(diffuse.xyz + uShading.emissiveFactor.xyz , 1.0);
}

void TGBufferGen() {
    vec4 diffuse = uShading.baseColorFactor;
#if USE_UV0
    diffuse = texture(sampler2D(tAlbedo, sAlbedo), _UV0);
#endif

    vec3 normal = vec3(0);

#if USE_NORMAL_MAP && USE_TANGENT && USE_BITANGENT
    vec3 _normal = normalize(texture(sampler2D(tNormalMap, sNormalMap), _UV0).xyz);
    _normal = _normal * 2.0 - 1.0;
    normal = normalize(_TBN * _normal); 
#elif USE_NORMAL
    normal = normalize(_WorldNormal);
#endif

// #if USE_OCCLUSION_MAP
//     diffuse.xyz += texture(sampler2D(tOcclusionMap, sOcclusionMap), _UV0).xyz * 0.0;
// #endif 

// #if USE_METALLIC_ROUGHNESS_MAP
//     diffuse.xyz += texture(sampler2D(tMetallicRoughnessMap, sMetallicRoughnessMap), _UV0).xyz * 0.0;
// #endif 

    OutColor = diffuse;

#if GEN_GBUFFER_PASS
    GNormal = vec4(normal, 1.0);
    GPosition = _WorldPosition;
#if USE_EMISSIVE_MAP
    GEmissive = texture(sampler2D(tEmissiveMap, sEmissiveMap), _UV0);
#endif 

#if USE_METALLIC_ROUGHNESS_MAP
    GMaterial = texture(sampler2D(tMetallicRoughnessMap, sMetallicRoughnessMap), _UV0);
#else
    GMaterial = vec4(uShading.metallicFactor, uShading.roughnessFactor, 0, 0);
#endif 

#endif
}

// don't output anything
void TShadowMapGen() 
{
}

