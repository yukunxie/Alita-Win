// https://gist.github.com/galek/53557375251e1a942dfa

layout(location = 0) in vec2 _UV0;

layout(binding = 11) uniform texture2D   tGDiffuse;
layout(binding = 12) uniform sampler     sGDiffuse;
layout(binding = 13) uniform texture2D   tGEmissive;
layout(binding = 14) uniform sampler     sGEmissive;
layout(binding = 15) uniform texture2D   tGNormal;
layout(binding = 16) uniform sampler     sGNormal;
layout(binding = 17) uniform texture2D   tGPosition;
layout(binding = 18) uniform sampler     sGPosition;
layout(binding = 19) uniform texture2D   tGMaterial;
layout(binding = 20) uniform sampler     sGMaterial;
layout(binding = 21) uniform texture2D   tShadowMap;
layout(binding = 22) uniform sampler     sShadowMap;
layout(binding = 23) uniform texture2D   tIBLBrdfMap;
layout(binding = 24) uniform sampler     sIBLBrdfMap;
layout(binding = 25) uniform textureCube    tCubeMap;
layout(binding = 26) uniform sampler        sCubeMap;
layout(binding = 27) uniform textureCube    tIrradiance;
layout(binding = 28) uniform sampler        sIrradiance;

layout(location = 0) out vec4 OutColor;

#define ShadowFactor 0.5

float textureProj(vec4 shadowCoord, vec2 off)
{
	float shadow = 1.0;
	if ( shadowCoord.z > -1.0 && shadowCoord.z < 1.0 ) 
	{
		float dist = texture(sampler2D(tShadowMap, sShadowMap), shadowCoord.xy + off ).r;
		if ( shadowCoord.w > 0.0 && dist < shadowCoord.z ) 
		{
			shadow = ShadowFactor;
		}
	}
	return shadow;
}

float filterPCF(vec4 sc)
{
	//ivec2 texDim = textureSize(sampler2D(tShadowMap, sShadowMap), 0);
    // float dx = scale / float(texDim.x);
	// float dy = scale / float(texDim.y);
	float scale = 1.0;
	float dx = scale / 2048.0;
    float dy = scale / 2048.0;

	float shadowFactor = 0.0;
	int count = 0;
	int range = 1;
	
	for (int x = -range; x <= range; x++)
	{
		for (int y = -range; y <= range; y++)
		{
			shadowFactor += textureProj(sc, vec2(dx*x, dy*y));
			count++;
		}
	
	}
	return shadowFactor / count;
}

// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};

const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;

vec3 getNormal()
{
    vec3 _WorldNormal = texture(sampler2D(tGNormal, sGNormal), _UV0).xyz;
    return normalize(_WorldNormal);
}

#define PI 3.1415926535897932384626433832795
#define ALBEDO texture(sampler2D(tGDiffuse, sGDiffuse), _UV0).rgb

// From http://filmicgames.com/archives/75
vec3 Uncharted2Tonemap(vec3 x)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

// Normal Distribution function --------------------------------------
float D_GGX(float dotNH, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float denom = dotNH * dotNH * (alpha2 - 1.0) + 1.0;
	return (alpha2)/(PI * denom*denom); 
}

// Geometric Shadowing function --------------------------------------
float G_SchlicksmithGGX(float dotNL, float dotNV, float roughness)
{
	float r = (roughness + 1.0);
	float k = (r*r) / 8.0;
	float GL = dotNL / (dotNL * (1.0 - k) + k);
	float GV = dotNV / (dotNV * (1.0 - k) + k);
	return GL * GV;
}

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
vec3 F_SchlickR(float cosTheta, vec3 F0, float roughness)
{
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 prefilteredReflection(vec3 R, float roughness)
{
	const float MAX_REFLECTION_LOD = 9.0; // todo: param/const
	float lod = roughness * MAX_REFLECTION_LOD;
	float lodf = floor(lod);
	float lodc = ceil(lod);
    vec3 a = textureLod(samplerCube(tCubeMap, sCubeMap), R, lodf).rgb;
    vec3 b = textureLod(samplerCube(tCubeMap, sCubeMap), R, lodc).rgb;

	// vec3 a = textureLod(prefilteredMap, R, lodf).rgb;
	// vec3 b = textureLod(prefilteredMap, R, lodc).rgb;
	return mix(a, b, lod - lodf);
}

vec3 specularContribution(vec3 L, vec3 V, vec3 N, vec3 F0, float metallic, float roughness)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNH = clamp(dot(N, H), 0.0, 1.0);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);
	float dotNL = clamp(dot(N, L), 0.0, 1.0);

	// Light color fixed
	vec3 lightColor = vec3(2.0);

	vec3 color = vec3(0.0);

	if (dotNL > 0.0) {
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(dotNV, F0);		
		vec3 spec = D * F * G / (4.0 * dotNL * dotNV + 0.001);		
		vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);			
		color += (kD * ALBEDO / PI + spec) * dotNL;
	}

	return color;
}

// Specular BRDF composition --------------------------------------------

// Fresnel function ----------------------------------------------------
vec3 F_Schlick(float cosTheta, float metallic)
{
	vec3 F0 = mix(vec3(0.04), ALBEDO, metallic); // * material.specular
	vec3 F = F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); 
	return F;    
}

vec3 BRDF(vec3 L, vec3 V, vec3 N, float metallic, float roughness)
{
	// Precalculate vectors and dot products	
	vec3 H = normalize (V + L);
	float dotNV = clamp(dot(N, V), 0.0, 1.0);
	float dotNL = clamp(dot(N, L), 0.0, 1.0);
	float dotLH = clamp(dot(L, H), 0.0, 1.0);
	float dotNH = clamp(dot(N, H), 0.0, 1.0);

	// Light color fixed
	vec3 lightColor = vec3(1.0);

	vec3 color = vec3(0.0);

	if (dotNL > 0.0)
	{
		float rroughness = max(0.05, roughness);
		// D = Normal distribution (Distribution of the microfacets)
		float D = D_GGX(dotNH, roughness); 
		// G = Geometric shadowing term (Microfacets shadowing)
		float G = G_SchlicksmithGGX(dotNL, dotNV, rroughness);
		// F = Fresnel factor (Reflectance depending on angle of incidence)
		vec3 F = F_Schlick(dotNV, metallic);

		vec3 spec = D * F * G / (4.0 * dotNL * dotNV);

		color += spec * dotNL * lightColor;
	}

	return color;
}


// TODO https://github.com/bwasty/gltf-viewer/blob/master/src/shaders/pbr-frag.glsl

void TShading() {

    vec4 wp = texture(sampler2D(tGPosition, sGPosition), _UV0);
    vec3 _WorldPosition = wp.xyz / wp.w;

	vec3 N = getNormal();

    vec3 V = normalize(uGlobal.EyePos.xyz - _WorldPosition);        // Vector from surface point to camera
	vec3 R = reflect(-V, N); 

    vec4 material = texture(sampler2D(tGMaterial, sGMaterial), _UV0);
	float metallic = material.b;
	float roughness = material.g;

#if 1
	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, ALBEDO, metallic);

	vec3 Lo = vec3(0.0);
    vec3 L = normalize(-uGlobal.SunLight.xyz);
    Lo += specularContribution(L, V, N, F0, metallic, roughness);
	// for(int i = 0; i < uboParams.lights[i].length(); i++) {
	// 	vec3 L = normalize(uboParams.lights[i].xyz - inWorldPos);
	// 	Lo += specularContribution(L, V, N, F0, metallic, roughness);
	// }   
	

	vec2 brdf = texture(sampler2D(tIBLBrdfMap, sIBLBrdfMap), vec2(max(dot(N, V), 0.0), roughness)).rg;
	vec3 reflection = prefilteredReflection(R, roughness).rgb;	
	vec3 irradiance = texture(samplerCube(tIrradiance, sIrradiance), N).rgb;

	// Diffuse based on irradiance
	vec3 diffuse = irradiance * ALBEDO;	

	vec3 F = F_SchlickR(max(dot(N, V), 0.0), F0, roughness);

	// Specular reflectance
	vec3 specular = reflection * (F * brdf.x + brdf.y);

	// Ambient part
	vec3 kD = 1.0 - F;
	kD *= 1.0 - metallic;	  
	vec3 ambient = (kD * diffuse + specular) ;// TODO * texture(aoMap, inUV).rrr;
	
	vec3 color = ambient + Lo;

    

	// // Tone mapping
	// color = Uncharted2Tonemap(color * 4.50 );//uboParams.exposure);
	// color = color * (1.0f / Uncharted2Tonemap(vec3(11.2f)));	
	// // Gamma correction
	// color = pow(color, vec3(1.0f / 2.2));//uboParams.gamma));

#else

	vec3 Lo = vec3(0.0);
    vec3 L = normalize(-uGlobal.SunLight.xyz);
    Lo += BRDF(L, V, N, metallic, roughness);

	vec3 color = ALBEDO;
	color += Lo;

#endif

	color += texture(sampler2D(tGEmissive, sGEmissive), _UV0).xyz;

	OutColor = vec4(color, 1.0);

    // OutColor = vec4(reflection, 1.0);

//     vec4 material = texture(sampler2D(tGMaterial, sGMaterial), _UV0);
//     float perceptualRoughness = material.g;
//     float metallic = material.r;

//     perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);
//     metallic = clamp(metallic, 0.0, 1.0);

//     float alphaRoughness = perceptualRoughness * perceptualRoughness;

//     vec4 baseColor = texture(sampler2D(tGDiffuse, sGDiffuse), _UV0);

//     vec3 f0 = vec3(0.04);
//     vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
//     diffuseColor *= 1.0 - metallic;
//     vec3 specularColor = mix(f0, baseColor.rgb, metallic);

//     float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

//     // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
//     // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
//     float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
//     vec3 specularEnvironmentR0 = specularColor.rgb;
//     vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

//     vec4 wp = texture(sampler2D(tGPosition, sGPosition), _UV0);
//     vec3 _WorldPosition = wp.xyz / wp.w;

//     vec3 n = getNormal();                             // normal at surface point
//     vec3 v = normalize(uGlobal.EyePos.xyz - _WorldPosition);        // Vector from surface point to camera
//     vec3 l = normalize(-uGlobal.SunLight.xyz);             // Vector from surface point to light
//     vec3 h = normalize(l+v);                          // Half vector between both l and v
//     vec3 reflection = -normalize(reflect(v, n));

//     float NdotL = clamp(dot(n, l), 0.001, 1.0);
//     float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
//     float NdotH = clamp(dot(n, h), 0.0, 1.0);
//     float LdotH = clamp(dot(l, h), 0.0, 1.0);
//     float VdotH = clamp(dot(v, h), 0.0, 1.0);

//     PBRInfo pbrInputs = PBRInfo(
//         NdotL,
//         NdotV,
//         NdotH,
//         LdotH,
//         VdotH,
//         perceptualRoughness,
//         metallic,
//         specularEnvironmentR0,
//         specularEnvironmentR90,
//         alphaRoughness,
//         diffuseColor,
//         specularColor
//     );

//     vec3 F = specularReflection(pbrInputs);
//     float G = geometricOcclusion(pbrInputs);
//     float D = microfacetDistribution(pbrInputs);

//     // Calculation of analytical lighting contribution
//     vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
//     vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
//     vec3 color = NdotL * uGlobal.SunLightColor.xyz * (diffuseContrib + specContrib);

//     vec3 u_AmbientLightColor = vec3(0.1);
//     float u_AmbientLightIntensity = 1.0;

//     // Calculate lighting contribution from image based lighting source (IBL)
// #ifdef USE_IBL
//     color += getIBLContribution(pbrInputs, n, reflection);
// #else
//     // Add simple ambient light
//     color += u_AmbientLightColor * u_AmbientLightIntensity * baseColor.xyz;
// #endif

//     // Apply optional PBR terms for additional (optional) shading
// #ifdef HAS_OCCLUSIONMAP
//     float ao = texture(u_OcclusionSampler, v_UV[u_OcclusionTexCoord]).r;
//     color = mix(color, color * ao, u_OcclusionStrength);
// #endif

//     color += texture(sampler2D(tGEmissive, sGEmissive), _UV0).xyz;

//     OutColor = vec4(color, 1.0);

}